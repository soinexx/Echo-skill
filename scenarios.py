import random
from sentiment import analyze_sentiment, get_emotional_commentary

# -------------------------------
# Статические вопросы для трёх веток
# -------------------------------
QUESTIONS = {
    "self": [
        "Какие пять вещей важны для вас в работе. Присутствуют ли они сейчас в вашей жизни?",
        "Какой карьерный совет вы бы дали себе в 15 лет?",
        "Каковы ваши сильные и слабые стороны в работе?",
        "Какие занятия вас заряжают и придают сил? Составьте список из десяти пунктов.",
        "Если вам не нравится ваша работа, назовите 3 причины, почему вы продолжаете на нее ходить.",
        "Что заставляет вас испытывать гордость в процессе профессионального роста?",
        "Чувствуете ли вы сейчас себя на своем месте? Назовите три причины почему это так.",
        "За что вы благодарны своим родителям?",
        "Есть ли что-то, за что вы обижаетесь на родителей? Как вы думаете, почему они так поступали? Какие обстоятельства на них влияли?",
        "Каким словом вы могли бы охарактеризовать свое детство?",
        "Что бы вы хотели изменить в том, как вас воспитывали родители?",
        "Вспомните ситуацию, в которой вы чувствовали себя виноватым. По каким причинам, не зависящим от вас, она могла произойти?",
        "За что вы чаще всего себя ругаете? Попробуйте перефразировать эти претензии в похвалы.",
        "Какие качества в вас ценят ваши близкие?",
        "Какие достижения за последние полгода вы считаете самыми значимыми?",
        "Какое занятие вас вдохновляет и заряжает настолько, что вы были бы готовы за него доплачивать?",
        "Общение с какими людьми наполняет вас энергией и приятными эмоциями? Почему?",
        "Как вы ведете себя в конфликтных ситуациях? Как бы в них вела себя ваша идеальная версия? Что из ее поведения вы могли бы перенять уже сейчас?",
        "Расскажите, что вы чувствуете сейчас на самом деле?",
        "Какие вещи влияют на ваше настроение и эмоциональное состояние?",
        "На что похож ваш идеальный день?",
        "Какой вы представляли себе взрослую жизнь, будучи ребенком? Насколько это представление отличается от реальности?",
        "Какие страхи и переживания были важными для вас полгода назад, но сейчас не имеют никакого значения?",
        "Какие страхи и переживания важны для вас сейчас, но перестанут иметь значение через полгода?",
        "На кого или что вы злитесь прямо сейчас?",
        "В каких частях тела концентрируются ваши обиды, усталость, страхи и злость?",
        "Что вы делаете для заботы о себе? Какой отдых дает вам больше всего сил и позитивных эмоций?",
        "Какие ситуации или люди вас расстраивают или злят?"
    ],
    "couple": [
        "Назовите три главные вещи, которые вас объединяют, и три, в чем вы разные.",
        "Как мне давать обратную связь, чтобы она была честной, но не ранила тебя?",
        "Вспомни один момент, когда ты почувствовала себя превосходно благодаря мне, что я могу сделать, чтобы это случалось чаще?",
        "Каким было твоё первое впечатление обо мне, когда мы познакомились?",
        "Какие у тебя отношения с родителями?",
        "Какое воспоминание о нас вызывает у тебя улыбку?",
        "Чему ты у меня научился?",
        "Представь, что тебе нужно отправить меня на обучающий курс, который укрепит наши отношения. Какой курс выберешь?",
        "В чем мы разные? Могут ли у пары быть секреты друг от друга? Приведите примеры.",
        "Какой период наших отношений тебе запомнился больше всего и почему?",
        "Как выглядит наш идеальный день, когда нам будет 70 лет?",
        "Есть ли темы, которых стоит избегать в общении с тобой?",
        "Что в тебе изменилось с тех пор, как мы начали встречаться?",
        "Какую семейную традицию тебе хотелось бы сохранить в наших отношениях?",
        "Какая ошибка была лучшей в твоей жизни?",
        "Что я могу сказать или сделать, чтобы поддержать тебя в трудные периоды?",
        "Что для тебя значит качественно проводить друг с другом время?",
        "Что тебя во мне привлекло, когда мы впервые встретились, а что, когда познакомились поближе?",
        "Каким для тебя был наш первый поцелуй?",
        "Легко ли ты делишься едой или ненавидишь, когда залезают в твою тарелку?",
        "Что для тебя значит надежность и доверие в отношениях? Присутствует ли это в наших отношениях?",
        "Как ты относишься к годовщинам, дням рождения и гендерным праздникам? Важны ли они? Как предпочитаешь праздновать?",
        "Как ты относишься к браку? Нужен ли он в современном мире?",
        "Расскажи о своей самой забавной особенности.",
        "Продолжи фразу: «Я не смогу продолжать отношения, если...»",
        "Когда ты последний раз меня ревновал?",
        "Когда ты понял, что любишь меня?",
        "О чём ты очень хочешь рассказать, но молчишь из-за чувства неловкости?",
        "О чём ты жалеешь?",

    ],
    "group": [
        "Что ты обычно чувствуешь в свой день рождения?",
        "О чём ты жалеешь?",
        "От каких стереотипов тебе удалось избавиться?",
        "Расскажи о своем самом ярком воспоминании из детства.",
        "Какая бесплатная и легко доступная вещь всегда помогает тебе улыбнуться.",
        "За что ты так цепко держишься, что пора бы уже отпустить?",
        "Расскажи о самом трудном периоде в своей жизни. Чему он тебя научил?",
        "Представь, что можно было бы изменить любой закон в нашей стране. Какой закон бы это был?",
        "Если ты принимаешь серьезные решения, приведи примеры своей жизни.",
        "Когда ты сильно устаешь, что ты делаешь, чтобы восстановиться?",
        "Назови любимую вещь или гаджет дешевле $100, который сделал твою жизнь гораздо комфортнее.",
        "Какой самый рискованный поступок был в твоей жизни?",
        "Как ты строишь глубокие и искренние отношения?",
        "За что в своей жизни ты испытываешь благодарность, расскажи почему.",
        "Как ты относишься к смерти?",
        "Что в твоей жизни сейчас дарит тебе счастье?",
        "Расскажи о самом ценном опыте в своей жизни.",
        "Кто больше всего повлиял на твое развитие? Каким образом?",
        "Что заставляет тебя улыбаться в самые грустные моменты?",
        "Как проходит твой день?",
        "Чему бы тебе хотелось научиться до конца своей жизни?",
        "Из-за чего ты последний раз плакал?",
        "Какая поддержка и помощь тебе бы сейчас пригодилась.",
        "Какой путь тебе пришлось проделать, чтобы прийти туда, где ты сейчас?",
        "Как выглядит твой идеальный день?",
        "На что в своей жизни ты тратишь слишком много времени?",
        "Какой самый смелый поступок ты совершил в своей жизни?",
        "Чему ты можешь научить других?",
        "Если бы можно было создать компанию, успех которой гарантирован, чем бы она занималась?",
        "Какое самое яркое воспоминание осталось у тебя от прошлого года?",
        "Что для тебя значит успех?",
        "В чем твои суперсилы и как тебе удалось их приобрести?",
        "Чьей жизнью тебе бы хотелось пожить один день?",
        "Какие итоги недели тебя заряжают, дают чувство удовлетворения и мотивируют двигаться дальше?",
        "Что прямо сейчас ты видишь как самый большой вызов для себя?",
        "Какая идея тебя вдохновила за этот год?",
        "Что прямо сейчас в твоей жизни приносит больше всего удовольствия?",
        "Что бы тебе хотелось успеть сделать до конца года?",
        "Каким образом к тебе приходят идеи?",
        "Кем из известных людей ты восхищаешься?",
        "Если бы тебя спросили, как найти счастье, что бы ты мог посоветовать?",
        "Какие качества личности тебе бы хотелось себе добавить?",
        "Чем в своей жизни ты сейчас гордишься?",
        "Чего ты боишься?",
        "Вспомни 5 ситуаций, в которых тебе удалось добиться успеха.",
        "В чем тебе удалось преуспеть на этой неделе?",
        "Какую самую мудрую мысль тебе доводилось слышать?",
        "Что бы тебе хотелось успеть сделать в жизни?",
        "Какие люди сыграли ключевую роль в твоей жизни?",
        "Какие решения в твоей жизни были поворотными?",
        "Какой вид отдыха для тебя самый ресурсный?",
        "Какой персонаж, реальный или вымышленный, тебя вдохновляет? Каким качеством он обладает?",
        "Если бы у тебя вышла книга, какое у неё было бы название и о чём была бы она?",
        "Если у тебя было достаточно денег, чтобы не работать, чем бы ты занялся?",
        "Какая одна вещь должна произойти сегодня, чтобы этот день можно было назвать прекрасным?",
        "Где тебе хотелось бы проснуться завтра?",
        "Что было самым большим вызовом в твоей жизни?",
        "В чем заключается твоя суперидея?",
        "Какие суперсилы тебя вдохновляют в людях?",
        "Что приносит тебе радость и восторг?",
        "Что помогает тебе сохранить мотивацию заниматься своим делом, несмотря ни на что?",
        "Какой период твоей жизни был самым бесполезным, почему?",
        "Что для тебя значит любовь?",
        "Что ты умеешь делать сегодня, чего не смог бы сделать в прошлом году?",
        "Какие у тебя отношения с родителями?",
        "Если бы тебе сейчас встретился волшебник, какой вопрос ты бы ему задал?",
        "Какой главный совет жизни ты бы дал своим детям?",
        "Почему в своей жизни ты уделяешь недостаточно времени?",
        "От какой одной вещи или привычки тебе хотелось бы отказаться, чтобы сделать свою жизнь лучше?",
        "Каким бы тебе хотелось, чтобы тебя запомнили твои дети и внуки?",
        "Какой новой для тебя области тебе бы хотелось разбираться на уровне эксперта?",
        "Если бы твой дом загорелся, какую одну вещь ты бы спас?",
        "Если бы можно было изменить в себе одну вещь, то что бы это было?",
        "Как выглядит твоё счастье?",
        "Ради чего ты живешь?",
        "Расскажи о самом прекрасном путешествии в твоей жизни.",
        "В какой стране тебе бы хотелось пожить продолжительное время?",
        "Где твоё место силы?",
        "Где тебе хотелось бы провести свою старость?",
        "Если бы у тебя была возможность вернуться в детство, что бы ты сделал по-другому?",
        "Что больше всего тебя вдохновляет в том, чем ты занимаешься?",
        "О чём ты мечтаешь?",
        "Представь, что сегодня последний день твоей жизни. Как бы тебе хотелось его провести?",
        "Чему тебе недавно удалось научиться?",
        "Если бы тебе дали билборд, который увидит весь мир, что бы ты на нём написал?",
        "Если бы ты мог поговорить с кем угодно сегодня, кто бы это был и что бы ты ему сказал?",
        "Какой период жизни тебе запомнился больше всего и почему?",
        "Представь, что ты разговариваешь с собой 10 лет назад. Что бы ты хотел себе посоветовать?",
        "Какой самый главный урок дал тебе этот год?",
        "В чем бы тебе хотелось, чтобы твои дети были похожи на тебя?",
        "Какое дело было самым важным сегодня?",
        "Как твои дела на самом деле?",
        "Каким было твоё первое впечатление обо мне?",
        "Если бы у тебя был дополнительный час в сутках, на что бы тебе хотелось его потратить?",
        "Что бы тебе хотелось попробовать прямо сейчас, если бы тебе гарантировали успех?",
        "Если бы ты получил бессмертие, что в своей жизни ты бы делал по-другому?"
    ]
}

# -------------------------------
# Возможные фразы для старта
# -------------------------------
START_PHRASES = [
    "начнем", "начнём", "старт", "стартуем", "давай", 
    "поехали", "погнали", "приступим", "да", "ок", 
    "ага", "хорошо", "ладно", "го", "гоу"
]

# -------------------------------
# Возможные фразы для завершения
# -------------------------------
STOP_PHRASES = [
    "стоп", "заверши", "закончи", "выйти", 
    "выход", "хватит", "закончим"
]

# -------------------------------
# Команды для переходов
# -------------------------------
NEXT_PHRASES = ["дальше", "пропустить", "следующий", "пропусти"]
PREV_PHRASES = ["назад", "предыдущий", "вернись", "вернемся", "вернутся", "вернуться"]

# -------------------------------
# Команды для повтора вопроса
# -------------------------------
REPEAT_PHRASES = [
    "повтори", "ещё раз", "еще раз", "не расслышал", "не понял",
    "не расслышала", "можно повторить", "повторите вопрос",
    "не поняла", "не слышал", "не слышала", "повтори пожалуйста",
    "еще разок", "повторить вопрос", "скажи еще раз", "повтори еще раз"
]

# -------------------------------
# Помощь
# -------------------------------
HELP_PHRASES = ["что ты умеешь", "помощь", "help", "инструкция", "напомни варианты"]

# -------------------------------
# Команда вернуться к выбору сценариев
# -------------------------------
BACK_SCENARIOS_PHRASES = [
    "вернуться к сценариям",
    "вернуться к сценарию",
    "другой сценарий", 
    "хочу другой сценарий", 
    "назад к сценарию", 
    "к выбору", 
    "передумал",
    "передумала",
    "я передумал",
    "хочу вернуться",
    "к сценарию",
    "к сценариям"
]

def handle_dialog(request, session, state):
    command = request.get('command', '').lower().strip()
    is_new_session = session.get('new', False)

    session_state_in = state.get('session', {})
    session_state_out = dict(session_state_in)

    phase = session_state_out.get('phase', 'choose_scenario')
    branch = session_state_out.get('branch')
    step = session_state_out.get('step', 0)
    pending_back_choice = session_state_out.get('pending_back_choice', False)

    # -------------------------
    # Начало сессии
    # -------------------------
    if is_new_session:
        session_state_out = {
            "phase": "choose_scenario",
            "branch": None,
            "step": 0,
            "polarities": [],
            "pending_back_choice": False,
            "randomized_questions": []
        }
        text = (
            "Привет! Меня зовут Эхо.\n"
            "Вы запустили навык «Мысли вслух».\n"
            "Эта несложная игра поможет вам начать лучше понимать себя,\n"
            "узнать вашу вторую половинку или познакомиться с новыми людьми.\n\n"
            "У вас есть несколько вариантов игры:\n"
            "— Вопросы для самоанализа,\n"
            "— Вопросы для пары,\n"
            "— Вопросы для компании.\n\n"
            "Чтобы выбрать один из вариантов, скажите:\n"
            "«Эхо, выбираю вопросы для самоанализа»\n"
            "или «Эхо, запусти вопросы для пары».\n\n"
            "Чтобы завершить, скажите «Завершить» или «Стоп».\n\n"
            "Если вам нужна помощь, скажите «Помощь» или «Что ты умеешь?»"
        )
        return build_response(text, session_state_out)

    # -------------------------
    # Общие команды: помощь, стоп
    # -------------------------
    if check_phrase_in(command, HELP_PHRASES):
        return handle_help(session_state_out)

    if check_phrase_in(command, STOP_PHRASES):
        session_state_out['phase'] = 'rating'
        text = (
            "Вы хотите завершить навык. Пожалуйста, оцените его по шкале от 1 до 5. "
            "Например, скажите «моя оценка 4»."
        )
        return build_response(text, session_state_out, end_session=False)

    # -------------------------
    # Фаза rating (оценка)
    # -------------------------
    if phase == "rating":
        return handle_rating(command, session_state_out)

    # -------------------------
    # Фаза choose_scenario
    # -------------------------
    if phase == "choose_scenario":
        return handle_choose_scenario(command, session_state_out)

    # -------------------------
    # Фаза waiting_start
    # -------------------------
    if phase == "waiting_start":
        # Команда вернуться к сценариям (хотя мы уже там)
        if check_phrase_in(command, BACK_SCENARIOS_PHRASES):
            session_state_out['phase'] = "choose_scenario"
            session_state_out['branch'] = None
            session_state_out['randomized_questions'] = []
            text = (
                "Вы решили вернуться к выбору сценария.\n"
                "Чтобы выбрать другой сценарий, скажите: "
                "«Эхо, выбираю вопросы для самоанализа», «для пары» или «для компании»."
            )
            return build_response(text, session_state_out)

        # Начать игру?
        if check_phrase_in(command, START_PHRASES):
            session_state_out['phase'] = "quiz"
            session_state_out['step'] = 0
            session_state_out['pending_back_choice'] = False
            return ask_question(session_state_out)

        # Иначе не поняли
        text = (
            "Извините, я вас не понял. "
            "Скажите «начнем», если готовы начать игру, "
            "или «назад к сценарию», чтобы выбрать другой сценарий."
        )
        return build_response(text, session_state_out)

    # -------------------------
    # Фаза quiz
    # -------------------------
    if phase == "quiz":
        # 1) Если ранее мы спросили «точно ли вы хотите вернуться?», то проверим ответ
        if pending_back_choice:
            session_state_out['pending_back_choice'] = False  # сбрасываем

            # Если «вернуться к сценарию»
            if check_phrase_in(command, BACK_SCENARIOS_PHRASES):
                session_state_out['phase'] = "choose_scenario"
                session_state_out['branch'] = None
                session_state_out['step'] = 0
                session_state_out['randomized_questions'] = []
                text = (
                    "Окей, возвращаемся к выбору сценария.\n"
                    "Вам доступны:\n"
                    "— Вопросы для самоанализа,\n"
                    "— Вопросы для пары,\n"
                    "— Вопросы для компании.\n\n"
                    "Про какой из них вы хотели бы узнать поподробнее?"
                )
                return build_response(text, session_state_out)

            # Если «предыдущий вопрос»
            if check_phrase_in(command, PREV_PHRASES):
                step = session_state_out['step']
                if step > 0:
                    session_state_out['step'] = step - 1
                    return ask_question(session_state_out)
                else:
                    text = (
                        "Вы уже на самом первом вопросе, предыдущего нет. "
                        "Я просто повторю текущий вопрос:"
                    )
                    return ask_question(session_state_out, repeat=True)

            # Непонятный ответ
            text = (
                "Извините, я вас не понял. "
                "Скажите «вернуться к сценариям» или «назад», чтобы вернуться к предыдущему вопросу."
            )
            return build_response(text, session_state_out)

        # 2) Проверка «вернуться к сценарию» в любом месте игры
        if check_phrase_in(command, BACK_SCENARIOS_PHRASES):
            session_state_out['phase'] = "choose_scenario"
            session_state_out['branch'] = None
            session_state_out['step'] = 0
            session_state_out['randomized_questions'] = []
            text = (
                "Вы решили вернуться к выбору сценария.\n"
                "Чтобы выбрать другой сценарий, скажите: "
                "«Эхо, выбираю вопросы для самоанализа», «для пары» или «для компании»."
            )
            return build_response(text, session_state_out)

        # 3) Команда «назад» (PREV_PHRASES)
        if check_phrase_in(command, PREV_PHRASES):
            step = session_state_out['step']
            # Если мы на первом вопросе => уточняем
            if step == 0:
                session_state_out['pending_back_choice'] = True
                text = (
                    "Вы хотите вернуться к выбору сценариев или перейти к предыдущему вопросу? "
                    "Скажите «вернуться к сценариям» или «назад к вопросу»."
                )
                return build_response(text, session_state_out)
            else:
                session_state_out['step'] = step - 1
                return ask_question(session_state_out)

        # 4) Команда «дальше» — пропустить вопрос, перейти на следующий
        if check_phrase_in(command, NEXT_PHRASES):
            session_state_out['pending_back_choice'] = False
            session_state_out['step'] = session_state_out['step'] + 1
            return ask_question(session_state_out)

        # 5) Команда «повтори» — просто озвучить текущий вопрос ещё раз
        if check_phrase_in(command, REPEAT_PHRASES):
            session_state_out['pending_back_choice'] = False
            return ask_question(session_state_out, repeat=True)

        # 6) Любой другой текст => считаем ответ, делаем сентимент-анализ
        session_state_out['pending_back_choice'] = False

        polarity = analyze_sentiment(command)
        branch = session_state_out.get('branch', 'self')
        comment = get_emotional_commentary(polarity, branch)

        session_state_out['step'] = session_state_out['step'] + 1
        next_resp = ask_question(session_state_out)

        text_with_comment = f"{comment}\n{next_resp['response']['text']}"
        next_resp['response']['text'] = text_with_comment
        next_resp['response']['tts'] = text_with_comment

        return next_resp

    # -------------------------
    # Если ничего не подошло
    # -------------------------
    text = (
        "К сожалению, я не понял вас. "
        "Для выбора сценария скажите, например, «Эхо, выбираю вопросы для самоанализа». "
        "Для завершения скажите «стоп»."
    )
    return build_response(text, session_state_out)


# ------------------------------------------------------------------------------
# 1. Фаза: выбор сценария
# ------------------------------------------------------------------------------
def handle_choose_scenario(command: str, session_state_out: dict) -> dict:
    branch = None
    if "самоанализ" in command:
        branch = "self"
    elif "пар" in command:
        branch = "couple"
    elif "компан" in command:
        branch = "group"

    if branch:
        # Сохраняем ветку
        session_state_out['branch'] = branch
        session_state_out['phase'] = "waiting_start"
        session_state_out['step'] = 0
        session_state_out['pending_back_choice'] = False

        # 1) Берём список вопросов
        questions_copy = QUESTIONS[branch][:]
        # 2) Перемешиваем
        random.shuffle(questions_copy)
        session_state_out['randomized_questions'] = questions_copy

        if branch == "self":
            text = (
                "Отлично! Вы выбрали «вопросы для самоанализа». "
                "Вам будут предложены вопросы, о которых вы возможно не задумывались\n"
                "из-за повседневной суеты или личных забот. Они помогут вам глубже понять себя, свои ценности, приоритеты\n"
                "и отношение к различным аспектам жизни.\n\n"
                "Хотите начать — скажите «Начнем!».\n"
                "Хотите вспомнить другие варианты — скажите «Эхо, напомни варианты».\n"
                "Если хотите вернуться назад к выбору, скажите «вернуться к сценариям»."
            )
        elif branch == "couple":
            text = (
                "Вы выбрали «вопросы для пары». "
                "В этом типе игры вам будут предложены вопросы, чтобы лучше узнать вашу вторую половинку и обсудить то, \n"
                "на что, возможно, не было времени или не хватало решимости. \n\n"
                "Как играть:\n"
                "По очереди отвечайте на вопросы, а также задавайте вопросы друг другу. \n"
                "Вы также можете отвечать на один и тот же вопрос, главное — не перебивать друг друга. \n"
                "Хотите начать — скажите «Начнем!»,\n хотите вспомнить другие варианты игры — скажите «Эхо, напомни варианты»"
            )
        else:  # group
            text = (
                "Добро пожаловать в «Вопросы для компании».\n"
                "Эта игра поможет вам лучше узнать друг друга и весело провести время. \n"
                "Я буду задавать вам вопросы, а вы будете отвечать по очереди. \n"
                "Можете при этом задавать вопросы друг другу — главное, не перебивать. \n"
                "Чтобы начать, скажите «Начнем!» или «Поехали!».\n"
                "Чтобы вспомнить варианты, скажите «Эхо, напомни варианты»."
            )
        return build_response(text, session_state_out)
    else:
        text = (
            "К сожалению, я не понял вас. Этот навык предназначен для вопросов о самопознании и общении. "
            "Попробуем вернуться к теме? Например, я могу заново повторить для вас варианты игры.\n" 
            "Скажите «Эхо, напомни варианты» или «Эхо, хочу и вариант игры»."
        )
        return build_response(text, session_state_out)


# ------------------------------------------------------------------------------
# Выдача вопроса (ask_question)
# ------------------------------------------------------------------------------
def ask_question(session_state_out: dict, repeat: bool=False) -> dict:
    """
    Выдаёт текущий (случайный) вопрос из session_state_out['randomized_questions'].
    Если repeat=True, не меняем step — просто повторяем текущий вопрос.
    Если вопросы кончились, переходим к оценке навыка.
    """
    shuffled_questions = session_state_out.get('randomized_questions', [])
    step = session_state_out['step']

    if repeat:
        # Не изменяем step
        pass
    else:
        # step уже изменён снаружи
        pass

    if step < 0:
        session_state_out['step'] = 0
        step = 0
    if step >= len(shuffled_questions):
        session_state_out['phase'] = 'rating'
        text = (
            "Вы ответили на все имеющиеся вопросы! "
            "Теперь я попрошу вас оценить навык от 1 до 5. "
            "Скажите, например, «моя оценка 5»."
        )
        return build_response(text, session_state_out, end_session=False)

    current_question = shuffled_questions[step]
    text = f"Ваш вопрос: {current_question}"
    return build_response(text, session_state_out, end_session=False)


# ------------------------------------------------------------------------------
# 4. Фаза: Оценка навыка (rating)
# ------------------------------------------------------------------------------
def handle_rating(command: str, session_state_out: dict) -> dict:
    rating = parse_rating(command)
    if rating:
        text = f"Спасибо за вашу оценку: {rating}. Возвращайтесь в любое время!"
        return build_response(text, session_state_out, end_session=True)
    else:
        text = (
            "Пожалуйста, оцените навык «Мысли вслух» от 1 до 5. "
            "Например, «моя оценка 4» или просто «4»."
        )
        return build_response(text, session_state_out, end_session=False)


# ------------------------------------------------------------------------------
# Помощь
# ------------------------------------------------------------------------------
def handle_help(session_state_out: dict) -> dict:
    text = (
        "У вас есть несколько вариантов игры:\n"
        "— Вопросы для самоанализа,\n"
        "— Вопросы для пары,\n"
        "— Вопросы для компании.\n\n"
        "Чтобы выбрать, скажите «Эхо, выбираю вопросы для самоанализа» или «Эхо, запусти вопросы для пары».\n"
        "Чтобы завершить, скажите «завершить» или «стоп».\n"
        "Если хотите начать игру, скажите «Начнем»!\n"
        "Чтобы вернуться к выбору сценариев, скажите «вернуться к сценариям»."
    )
    return build_response(text, session_state_out, end_session=False)


# ------------------------------------------------------------------------------
# Вспомогательные функции
# ------------------------------------------------------------------------------
def build_response(text: str, session_state: dict, end_session: bool=False) -> dict:
    return {
        "response": {
            "text": text,
            "tts": text,
            "end_session": end_session
        },
        "session_state": session_state,
        "version": "1.0"
    }

def check_phrase_in(command: str, phrases: list) -> bool:
    for ph in phrases:
        if ph in command:
            return True
    return False

def parse_rating(command: str) -> int:
    for num in range(1, 6):
        if str(num) in command:
            return num
    return 0